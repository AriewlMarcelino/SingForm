# -*- coding: utf-8 -*-
"""SistemaDeCadastroDeFormularios.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FpK1etRo-N1YPQO4cVfZqBocBWY2kL-d

#PseudoCodigo
"""

# Sistema de Formulario com SQLite

'''
PSEUDOCODIGO:

1. O usuario vai entrar em um sistema de formulario que vai ter os respectivos campos:
  - Nome completo do usuario
  - CPF do usuario
  - Endereço do usuario
  - Email

2. Nesse Sistema o usuario vai ter algumas opções como:
  - A opção de adicionar usuario (que é o inicio da aplicação)
  - Ele vai ter a opção de atualizar as informações
  - Ele vai poder deletar as informações
  - Listar dados de usuarios cadastrados


CLASSE

- Usuario

SubClasse


ATRIBUTOS NÃO FIXOS(SERIA ATRIBUTOS QUE NÂO SERÂO SETADOS MANUALMENTE):

- nome
- cpf
- endereco
- email



METODOS

- cadastrar()
 - metodo responsavel por cadastrar os usuarios.

- atualizar()
 - metodo responsavel por atualizar as informações dos usuarios cadastrados.

- deletar()
 - metodo responsavel por deletar usuarios cadastrados.

- listar()
  - metodo responsavél pela listagem dos usuarios cadastrados.

- interface()
  - metodo responsavél pelo inicio da aplicação mostrando as opções que o usuario tem dentro do sistema.


TECNOLOGIAS

- Python
- SQLite
- PyQT5

'''

"""# Class SQliteBancoDeDados
* Cria o banco
* Cria tabela
"""

import sqlite3


class SQliteBancoDeDados():
    def __init__(self):
        # Cria o banco de dados
        self.banco = sqlite3.connect('bd_formulario_de_cadastro.db')
        self.cursor = self.banco.cursor()

    def criar_banco(self):
        try:
            # Cria a tabela
            self.cursor.execute("CREATE TABLE tabela_formulario_de_cadastro (id INTEGER PRIMARY KEY AUTOINCREMENT, nome TEXT, cpf INTEGER, endereco TEXT, email TEXT)")
            print(f'Tabela criada com sucesso.')
            # Grava a tabela criada em nosso banco de dados:
            self.banco.commit()
        except sqlite3.Error as erro:
            #Se por algum motivo no execultar ou der algum erro exiba o seguinte:
            print(f'Tabela não foi criada ! {erro}')
        finally:
            self.banco.close()

SQliteBancoDeDados().criar_banco()

"""# Class CadastrarUsuario
Inserir o usuario com as seguintes informações:

 * nome,

 * cpf,

 * endereco,

 * email
"""

class CadastrarUsuario(SQliteBancoDeDados):
    # Metodos construtor da classe CadastrarUsuario:
    def __init__(self):
        # Super chama a classe mãe e propriedades e atributos:
        super().__init__()
        self.nome = input('Digite seu nome completo: ')
        self.cpf = input('Digite seu CPF: ')
        self.endereco = input('Digite seu endereço: ')
        self.email = input('Digite seu email: ')

    #Metodo que é responsavél por execultar o cadastro do usuario:
    def cadastrar_usuario(self):
        try:
            # Tente inseir na tabela xxxx os seguintes atributos (xxxx,xxx,xxxxxxx,xxxxx) com os seguintes valores (self.xxxx):
            self.cursor.execute('INSERT INTO tabela_formulario_de_cadastro (nome, cpf, endereco, email) VALUES(?,?,?,?)', (self.nome, self.cpf, self.endereco, self.email))
            # Vai enviar as informações a tabela:
            self.banco.commit()
            # Exiba a seguinte mensagem:
            print('Usuário cadastrado com sucesso!\n')
        except sqlite3.Error as erro:
            print(f'Erro ao cadastrar usuário: {erro}')
        finally:
            self.banco.close()

CadastrarUsuario().cadastrar_usuario()

"""# Exclusão de tabela (opcional para debbug)

"""

# import sqlite3

# class ExcluirTabela(SQliteBancoDeDados):
#       def __init__(self):
#         super().__init__()
#         self.banco = sqlite3.connect('bd_formulario_de_cadastro.db')
#         self.cursor = self.banco.cursor()

#       def exluir_tabela(self):
#         try:
#           self.cursor.execute('DROP TABLE IF EXISTS bd_formulario_de_cadastro')
#           self.banco.commit()
#           print('Tabela Excluida com sucesso !')
#         except sqlite3.Error as erro:
#           print(f'Erro ao excluir tabela.{erro}')
#         finally:
#           self.banco.close()

# excluir_tabela = ExcluirTabela()
# excluir_tabela.exluir_tabela()

"""# Class AtualizaUsuario
- Atualiza as caracteriticas do usuario cadastrado.
"""

class AtualizarUsuario(SQliteBancoDeDados):
  def __init__(self):
      super().__init__()
      self.cursor = self.banco.cursor()
      self.id = input('Digite o id do usuario que deseja atualizar ?')
      self.nome = input('Digite seu nome completo: ')
      self.cpf = input('Digite seu CPF: ')
      self.endereco = input('Digite seu endereço: ')
      self.email = input('Digite seu email: ')

  def atualizar_usuario(self):
    try:
      self.cursor.execute('UPDATE tabela_formulario_de_cadastro SET nome=?, cpf=?, endereco=?, email=? WHERE id=?', (self.nome, self.cpf, self.endereco, self.email,self.id))
      self.banco.commit()
      print('Usuario atualizado com sucesso.')
    except sqlite3.Error as erro:
      print(f'Erro ao atualizar usuário: {erro}')
    finally:
      self.banco.close()



AtualizarUsuario().atualizar_usuario()

"""# Class ListarUsuarios
 - Lista todos os usuarios cadastrados dentro do banco de dados.
"""

class ListarUsuarios(SQliteBancoDeDados):
    def __init__(self):
        super().__init__()

    def listar_usuarios(self):
        try:
            print('*'*25)
            print('  Listagem de Usuarios')
            print('*'*25)
            self.cursor.execute("SELECT * FROM tabela_formulario_de_cadastro")
            for i in self.cursor.fetchall():
                print(f'\nId: {i[0]}')
                print(f'Nome: {i[1]}')
                print(f'CPF: {i[2]}')
                print(f'Endereço: {i[3]}')
                print(f'Email: {i[4]}\n')
            print('*'*25)
        except sqlite3.Error as erro:
            print(f'Erro ao listar usuarios: {erro}')
        finally:
            self.banco.close()

listar_usuarios = ListarUsuarios()
listar_usuarios.listar_usuarios()

"""# ExcluirUsuario
- Exclui um usuario que esta no banco de dados
"""

class ExcluirUsuario(SQliteBancoDeDados):
    def __init__(self):
        super().__init__()
        self.id = input('Digite o id do usuario que deseja excluir ?')

    def excluir_usuario(self):
      while True:
        print('Insira um id disponivél !')
        self.id = input('Digite o id do usuario que deseja excluir ?')
        try:
          self.cursor.execute('DELETE FROM tabela_formulario_de_cadastro WHERE id = ?', (self.id,))
          self.banco.commit()
          break
          print('Usuario removido com sucesso !')
        except sqlite3.Error as erro:
            print(f'Erro ao excluir usuário: {erro}')
        finally:
            self.banco.close()


# A chamada para excluir_usuario() deve estar fora da classe
excluir_usuario = ExcluirUsuario()
excluir_usuario.excluir_usuario()

"""# Interface de execução do Sistema"""

# Interface com as seguintes opções para o usuario

class Interface():
  def __init__(self):
    self.interface()

  def interface(self):
    print('-'*25)
    print(f'| Sistema de Formulario |')
    print('-'*25)

    print(f'1 - Adicionar Usuario')
    print(f'2 - Atualizar Usuario')
    print(f'3 - Deletar Usuario')
    print(f'4 - Listar Usuarios')
    print(f'0 - Sair')


    while True:
      try:
        escolha = int(input('Escolha uma das opções acima: '))

        if escolha == 0:
          print('Saindo do sistema...')
          break
        elif escolha == 1:
          return CadastrarUsuario().cadastrar_usuario()
          break
        elif escolha == 2:
          atualizar_usuario()
          break
        elif escolha == 3:
          return ExcluirUsuario().excluir_usuario()
          break
        elif escolha == 4:
          return ListarUsuarios().listar_usuarios()
          break
      except ValueError:
        print('Opção invalida! Tente as opções numericas !')
        os.system.clear('clear')
        print('Saindo do sistema...')

        break


Interface()
